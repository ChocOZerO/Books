
```
func multiply0(_ n: Int, _ a: Int) -> Int {
    if n == 1 { return a }
    return multiply0(n-1, a) + a
}
func odd(_ n: Int) -> Bool {
    return (n & 0x1) == 1
}
func half(_ n: Int) -> Int {
    return n >> 1
}
func multiply1(_ n: Int, _ a: Int) -> Int {
    if n == 1 { return a }
    var result: Int = multiply1(half(n), a + a)
    if odd(n) { result = result + a }
    return result
}
func multiply_by_15(_ a: Int) -> Int {
    let b: Int = (a + a) + a
    let c: Int = b + b
    return (c + c) + b
}

func mult_acc0(_ r: Int, _ n: Int, _ a: Int) -> Int {
    if n == 1 { return r + a }
    if odd(n) {
        return mult_acc0(r + a, half(n), a + a)
    } else {
        return mult_acc0(r, half(n), a + a)
    }
}
func mult_acc1(_ r: Int, _ n: Int, _ a: Int) -> Int {
    var r: Int = r
    if n == 1 { return r + a }
    if odd(n) { r = r + a }
    return mult_acc1(r, half(n), a + a)
}
func mult_acc2(_ r: Int, _ n: Int, _ a: Int) -> Int {
    var r: Int = r
    if odd(n) {
        r = r + a
        if n == 1 { return r }
    }
    return mult_acc2(r, half(n), a + a)
}
func mult_acc3(_ r: Int, _ n: Int, _ a: Int) -> Int {
    var r: Int = r
    var n: Int = n
    var a: Int = a
    if odd(n) {
        r = r + a
        if n == 1 { return r }
    }
    n = half(n)
    a = a + a
    return mult_acc3(r, n, a)
}
func mult_acc4(_ r: Int, _ n: Int, _ a: Int) -> Int {
    var r: Int = r
    var n: Int = n
    var a: Int = a
    while true {
        if odd(n) {
            r = r + a
            if n == 1 { return r }
        }
        n = half(n)
        a = a + a
    }
}

func multiply2(_ n: Int, _ a: Int) -> Int {
    if n == 1 { return a }
    return mult_acc4(a, n - 1, a)
}
func multiply3(_ n: Int, _ a: Int) -> Int {
    var n: Int = n
    var a: Int = a
    while !odd(n) {
        a = a + a
        n = half(n)
    }
    if n == 1 { return a }
    return mult_acc4(a, n - 1, a)
}
func multiply4(_ n: Int, _ a: Int) -> Int {
    var n: Int = n
    var a: Int = a
    while !odd(n) {
        a = a + a
        n = half(n)
    }
    if n == 1 { return a }
    return mult_acc4(a, half(n - 1), a + a)
}
```
